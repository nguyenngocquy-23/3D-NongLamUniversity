import { OrbitControls } from "@react-three/drei";
import { useThree, useFrame } from "@react-three/fiber";
import { useEffect, useRef } from "react";
import * as THREE from "three";
import gsap from "gsap";

/**
 * Nguy√™n l√Ω ho·∫°t ƒë·ªông c·ªßa OrbitControls:
 * 1. Lu√¥n setup camera h∆∞·ªõng v·ªÅ target t√¢m c·∫ßu.
 * 2. Xoay: t·ª©c l√† xoay camera ƒëi quanh c·∫ßu, n·∫øu coi t√¢m l√† m·∫∑t tr·ªùi th√¨ camera l√† tr√°i ƒë·∫•t.
 * 3. Zoom: n√¥m na l√† ƒë∆∞a tr√°i ƒë·∫•t v·ªÅ g·∫ßn m·∫∑t tr·ªùi h∆°n.
 * => V·∫≠y th√¨ ta c·∫ßn l·∫≠t ng∆∞·ª£c camera l·∫°i 180 ƒë·ªô ƒë·ªÉ camera nh√¨n v·ªÅ h∆∞·ªõng ng∆∞·ª£c l·∫°i.
 *
 */

type CamControlsProps = {
  radius: number;
  targetPosition?: [number, number, number] | null; //test
  sphereRef: React.RefObject<THREE.Mesh | null>;
};

const CamControls: React.FC<CamControlsProps> = ({
  radius,
  targetPosition,
  sphereRef,
}) => {
  const controlsRef = useRef<any>(null);
  const { camera } = useThree();

  useEffect(() => {
    if (!targetPosition) return;

    const [x, _, z] = targetPosition;

    const moveVector = new THREE.Vector3(x, 0, z); //test vector.

    gsap.to(camera.position, {
      x,
      y: 0,
      z: z + 0.1,
      duration: 2.5,
      ease: "expo.out",
      onUpdate: () => {
        controlsRef.current.target.set(x, 0, z); // C·∫≠p nh·∫≠t v·ªã tr√≠ target c·ªßa OrbitControls
      },
      onComplete: () => {
        console.log("Di chuy·ªÉn xong, c·∫≠p nh·∫≠t v·ªã tr√≠ h√¨nh c·∫ßu! [CamControls]");
        console.log("‚úÖ Camera Position Sau Khi Di Chuy·ªÉn:", camera.position);
        console.log(
          "‚úÖ Target Sau Khi Di Chuy·ªÉn:",
          controlsRef.current?.target
        );
        if (sphereRef.current) {
          sphereRef.current.position.copy(moveVector); // C·∫≠p nh·∫≠t v·ªã tr√≠ h√¨nh c·∫ßu
          console.log(
            "üü† V·ªã tr√≠ T√¢m Qu·∫£ C·∫ßu Sau Khi C·∫≠p Nh·∫≠t:",
            sphereRef.current.position
          );
        }

        setTimeout(() => {
          console.log("Thi·∫øt l·∫≠p h·ªá to·∫° ƒë·ªô m·ªõi");
          camera.position.sub(moveVector); // ƒê·∫∑t camera v·ªÅ v·ªã tr√≠ m·ªõi
          controlsRef.current.target.sub(moveVector); // ƒê·∫∑t l·∫°i target v·ªÅ t√¢m c·∫ßu
          if (sphereRef.current) {
            sphereRef.current.position.set(0, 0, 0);
          }
        }, 500);
      },
    });
  }, [targetPosition, camera, sphereRef]);

  // useFrame(() => {
  //   if (!controlsRef.current) return;

  //   // OrbitControls c·∫≠p nh·∫≠t v·ªã tr√≠ camera tr∆∞·ªõc
  //   controlsRef.current.update();

  //   // Camera g·ªëc lu√¥n nh√¨n v√†o t√¢m (0,0,0), nh∆∞ng ta c·∫ßn n√≥ quay l∆∞ng l·∫°i
  //   const viewDir = new THREE.Vector3()
  //     .subVectors(camera.position, new THREE.Vector3(0, 0, 0))
  //     .normalize();

  //   // Xoay 180 ƒë·ªô - t√≠nh v·ªã tr√≠ m·ªõi m√† camera n√™n nh√¨n
  //   const newTarget = new THREE.Vector3().copy(camera.position).add(viewDir);

  //   // B·∫Øt camera nh√¨n v·ªÅ h∆∞·ªõng m·ªõi
  //   camera.lookAt(newTarget);
  // });

  return (
    <OrbitControls
      ref={controlsRef}
      enablePan={false}
      // enableZoom={true}
      enableDamping={true}
      dampingFactor={0.3}
      // zoomSpeed={-1}
      rotateSpeed={-0.15}
      // minDistance={radius - 80}
      // maxDistance={radius - 20}
    />
  );
};

export default CamControls;
